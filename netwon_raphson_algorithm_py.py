# -*- coding: utf-8 -*-
"""Netwon-Raphson Algorithm.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oTaDFHQyk9k4h7VyaxYZ4mGQSyMOwUGC
"""

import numpy as npy

def f(x, a):
  return x**2 - a

#aim -> reach a value of 0 with the help of a (or as close to 0 as possible)

def df(x):
  return 2*x

#df(x) is the derivative of the function f(x)

def newton_raphson(x0, a, epsilon=1e-3, max_iter=20):
  for _ in range(max_iter):
    x1 = x0 - f(x0, a)/df(x0)
    if abs(x1 - x0) < epsilon:
      return x1
    x0 = x1
  return None

#x0 is the initial value
#epsilon is the tolerance between two successive values of x
#max_iter is the number of iterations
#_ is a throwaway; elements of the range are not important
# (we only want to iterate, it doesn't matter which iteration you're on)
#abs so that the value is always positive (for epsilon, to check tolerance_)

a = float(input("Enter the number which you want to find the square root of: "))
x0 = 1.0

root = newton_raphson(x0, a)

if root is not None:
    print(f"Square root of {a} is {root}")

else:
    print("The method did not converge")



#output for 2 should be 1.41421356... etc